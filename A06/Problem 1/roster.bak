;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname roster) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;; ***********************************************************
;; Mukund Rana (mk3rana)
;; CS 135 Fall 2020
;; Assignment 6, Q1
;; ***********************************************************
;;

;; =============================================================================
;; struct and data definitions For Q1
;; =============================================================================

;; A StudentID is a Nat with at most 8 digits (i.e. 0 <= id <= 99999999)

;; A Grade is one of:
;; * false
;; * Nat
;;   Requires: Nat is between 0 and 100 (inclusive)

(define-struct student (id name grade))
;; A Student is a (make-student StudentID Str Grade)


(define-struct rnode (student left right))
;; A Roster Node (RN) is a (make-rnode Student Roster Roster)
;; Requires: all students in the left subtree have an ID < student's ID
;;           all students in the right subtree have an ID > student's ID

;; A Roster is one of 
;; * empty
;; * RN


;; =============================================================================
;; constants used in Q1 examples
;; =============================================================================

(define beth (make-student 12345678 "Beth" 96))
(define jenny (make-student 08675309 "Jenny" 81))
(define john1 (make-student 48975311 "John" 95))
(define jenny/new (make-student 08675309 "Jen" 81))
(define john2 (make-student 20488192 "John" false))

(define sample-roster
  (make-rnode beth ; root
              (make-rnode jenny empty empty)   ; left child
              (make-rnode john1 empty empty))) ; right child

(define sample-roster-2
  (make-rnode beth 
              (make-rnode jenny/new empty empty)
              (make-rnode john1
                          (make-rnode john2 empty empty)
                          empty)))


;;
;; =============================================================================
;; Q1 a) 
;; =============================================================================
;;

;;(find-student student-id roster) consumes a StuendId and RN and produces the
;;  the matching student
;; Examples

(check-expect (find-student 12345678 sample-roster ) beth)
(check-expect (find-student 87654321 sample-roster ) false)

;;find-student: StudentID RN -> Str
(define (find-student studentID roster)
  (cond
    [(empty? roster) false]
    [(= studentID (student-id  (rnode-student roster))) (student-name  (rnode-student roster))]
    [(< studentID (student-id  (rnode-student roster))) (find-student studentID (rnode-left roster))]
    [(> studentID (student-id  (rnode-student roster))) (find-student studentID (rnode-right roster))]))






